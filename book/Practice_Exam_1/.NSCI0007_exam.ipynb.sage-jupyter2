{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":false,"type":"settings"}
{"cell_type":"markdown","id":"2dfc66","input":"## Question 1 [7]\nThe overlap between two strings `x` and `y` is the largest number `n` such that the last `n` characters of `x` are the same as the first `n` characters of `y`.\n - Write a function `overlap(x, y)` which returns the overlap between strings `x` and `y`\n - Test your function using the code below.\n\n```\nn1 = overlap(\"XXXABC\", \"ABCYYY\")\nn2 = overlap(\"ABCYYY\", \"XXXABC\")\nn3 = overlap(\"XXXABC\", \"ABC\")\nprint(n1, n2, n3)\n3 0 3\n```\n","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"691ee0","input":"# NSCI0007 Practice Exam 1\n**Exam Start:** N/A  \n**Exam End:** N/A\n## Instructions\n- Enter your answers in the file `answers.ipynb` in the practice exam folder.\n\n## Genome Sequencing\n\nA genome is an organism's complete set of deoxyribonucleic acid (DNA), a chemical compound that contains the genetic instructions needed to develop and direct the activities of every organism. A strand of DNA is made of four chemical units, called nucleotide bases. The bases are adenine (A), thymine (T), guanine (G) and cytosine (C).\n\nIn this assessment you will use a method similar to the Human Genome Project to sequence DNA. In a laboratory, a strand of DNA is duplicated several times, then all the strands are broken into smaller, overlapping fragments. The bases of the smaller fragments are determined and entered into a file. The goal of this assessment is to reconstruct a full DNA strand from the set of DNA fragments.\n\nThe basic operation is to process all the fragments by matching two fragments and merging them into a new fragment. This process decreases the number of fragments by one since two fragments are merged into one. The match/merge operation is repeated until there is only one fragment left - this will be the original DNA - or until no further matches are possible.\n\nOur starting point is a list of strings, each string representing a DNA fragment:\n\n```\n['tgaaaattcctttctattttaggccc', 'tgaaaattcctttctattttaggcccatgcaat', 'ggcattagggcggttaa', 'atgcaatggcattagggcggttaa', 'ggttaa', 'tgaaaattcctttctattt', 'taggcccatgcaatggcattagggc']\n```\n\nWe identify a pair of strings where the end of one string matches the start of the other.\n\n```\ntaggcccatgcaatggcattagggc\n              ggcattagggcggttaa\n```\nA new string is formed by merging the two together:\n```\ntaggcccatgcaatggcattagggcggttaa\n```\nThe pair of strings are then replaced by the merged string in the list.\n\nThis process is repeated until no further matches are possible.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"69edc5","input":"## Question 3 [10]\n- Write a function `longest_overlap(string_list)` which returns a list `[i, j, k]` of three integers.\n\nThe function should loop over every pair of strings in `string_list` to determine the pair with the largest overlap. It should return a list `[i, j, k]` where `i` and `j` are the indices of the two strings in `string_list` and `k` is the overlap. (It may be the case that more than one pair has the largest overlap. In this case your function may return any of those pairs).\n\n - Test your function with the code below.\n```\ni, j, k = longest_overlap([\"XXXABC\", \"ABCYYY\", \"BC\"])\nprint(i, j, k)\n0 1 3\n```","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"7d1e40","input":"## Question 4 [10]\n\nWrite a Python function `identify_strand(fragment_list, n)` which repeatedly applies the `longest_overlap` function to the list `fragment_list`. At each iteration, if the longest overlap is `n` or greater, then the code should:\n1. remove the two identified strings from the list.\n1. merge the two strings and append the merged string to the list.\n\nThe function should terminate when the list contains only a single string OR the longest overlap is strictly less than `n`.\n\nThe function should then return the list.\n\n**Hint:** Use the `del` keyword to remove an item from a list. For example, `del x[4]` removes the item at index 4 from the list `x`. Be very careful to remove the items in the correct order!\n\nTest your function with the code below:\n```\nsimple_dna = ['tgaaaattcctttctattttaggccc', 'tgaaaattcctttctattttaggcccatgcaat', 'ggcattagggcggttaa', 'atgcaatggcattagggcggttaa', 'ggttaa', 'tgaaaattcctttctattt', 'taggcccatgcaatggcattagggc']\ns = identify_strand(simple_dna, 4)\nprint(s)\n['tgaaaattcctttctattttaggcccatgcaatggcattagggcggttaa']\n```","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"88652d","input":"## Question 5 [8]\n\nThe following three text files each contains a set of DNA fragments. For each file:\n\n- Read the DNA fragments into a Python list (ignore any lines starting `'>'`).\n- Use the function `identify_strand` to reconstruct and print the DNA strand (assume the desired strand is the longest one)\n\n<a href=\"../practice_exam_1/strand_100.fasta\" download>strand_100.fasta</a>  \n<a href=\"../practice_exam_1/strand_200.fasta\" download>strand_200.fasta</a>  \n<a href=\"../practice_exam_1/strand_500.fasta\" download>strand_500.fasta</a>\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"d70d36","input":"## Question 2 [5]\n\n - Write a function `merge(x, y)` which returns a string formed by overlapping the two strings `x` and `y`.\n - Test your function using the code below.\n```\ns1 = merge(\"XXXABC\", \"ABCYYY\")\ns2 = merge(\"ABCYYY\", \"XXXABC\")\ns3 = merge(\"XXXABC\", \"ABC\")\nprint(s1, s2, s3)\nXXXABCYYY ABCYYYXXXABC XXXABC\n```","pos":2,"type":"cell"}
{"id":0,"time":1638146168078,"type":"user"}
{"last_load":1638146170097,"type":"file"}