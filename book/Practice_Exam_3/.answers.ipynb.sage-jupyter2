{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-552a8739-9fb4-4b3b-9dd2-f044d61dcfbe.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"8fef19","input":"# Question 1\n\nimport numpy as np\n\nG_1 = np.array([[0, 1, 1, 0, 0],\n                [1, 0, 1, 0, 1],\n                [1, 1, 0, 1, 1],\n                [0, 0, 1, 0, 1],\n                [0, 1, 1, 1, 0]])\n\n\n\ndef neighbours(A, i):\n    r = A[i,:]\n    n = []\n    for j in range(len(r)):\n        if r[j] == 1:\n            n.append(j)\n    return n\n\nneighbours(G_1, 0)\n\n# 4/4 if correct in general case\n# -1 if minor error in calculation\n# -2 if incorrect algorithm","output":{"0":{"data":{"text/plain":"[1, 2]"},"exec_count":1,"output_type":"execute_result"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"3eaebe","input":"# Question 2\n\ndef clustering_coefficient(A, i):\n    x = neighbours(A, i)\n    n = len(x)\n    if n <= 1: return 0\n    m = 0\n    for j in range(n):\n        for k in range(j+1, n):\n            if A[x[j], x[k]] == 1:\n                m += 1\n\n    return m / (n**2 - n)\n\n\nclustering_coefficient(G_1, 2)\n\n# 5/5 if correct in general case\n# -1 if minor error in calculation\n# -2 if incorrect algorithm","output":{"0":{"data":{"text/plain":"0.25"},"exec_count":2,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"b3e2c8","input":"# Question 3\n\ndef is_path(A, nodes):\n    for i in range(len(nodes) - 1):\n        if A[nodes[i], nodes[i+1]] == 0:\n            return False\n    nodes_unique = []\n    for i in nodes:\n        if i in nodes_unique:\n            return False\n        nodes_unique.append(i)\n    return True\n        \nprint(is_path(G_1, [0, 2, 1, 4]))\nprint(is_path(G_1, [0, 1, 2, 0]))\nprint(is_path(G_1, [0, 3, 4]))\n\n# 5/5 if correct in general case\n# -1 if minor error in calculation\n# -2 if incorrect algorithm","output":{"0":{"name":"stdout","output_type":"stream","text":"True\nFalse\nFalse\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"dfa468","input":"# Question 4\n\ndef average_clustering_coefficient(A):\n    c = []\n    for i in range(len(A)):\n        c.append(clustering_coefficient(A, i))\n    return np.mean(c)\n        \n\nprint(average_clustering_coefficient(G_1))\n\n# 4/4 if correct in general case\n# 3/4 if incorrect only due to error in clustering_coefficient function\n# 0/4 if incorrect\n","output":{"0":{"name":"stdout","output_type":"stream","text":"0.3833333333333333\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"60f530","input":"# Question 5\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\ndef generate_graph(A):\n    G = nx.Graph()\n    n = len(A)\n    for i in range(n):\n        for j in range(n):\n            if A[i,j] == 1:\n                G.add_edge(i, j)\n    return G\n\nG1 = generate_graph(G_1)\nnx.draw(G1)\n\n# 4/4 if correctly plotted the graph (any plotting style OK)\n# 3/4 if plotted digraph or other minor error\n# 2/4 if correctly created graph object but no graph plotted\n            ","output":{"0":{"data":{"image/png":"697487019c2e06d56af1c6df901ff483295b4458","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":5,"metadata":{"image/png":{"height":518,"width":878}},"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"ef43fd","input":"# Question 6\n\nfor i in range(3):\n    with open(\"graph0{}.txt\".format(i)) as f:\n        title = f.readline().strip()\n        n = int(f.readline())\n        A = np.zeros((n, n))\n        for i in range(n):\n            x = f.readline().strip()\n            for j in range(n):\n                A[i,j] = int(x[j])\n        G = generate_graph(A)\n        plt.figure()\n        nx.draw(G)        \n        acc = average_clustering_coefficient(A)\n        \n        x = plt.title(\"Graph name: {}\\nAverage clustering coefficient: {}\".format(title, acc))\n\n\n# 8/8 for 3 correctly plotted graphs\n# -1 for each error in figures\n# 4/8 if correctly read file and generated matrix, but no graphs plotted\n# 2/8 if correctly read file but matrix incorrect","output":{"0":{"data":{"image/png":"456436c9431411e3dd0aa65b69b067b9dbe6a1a8","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":547,"width":878}},"output_type":"execute_result"},"1":{"data":{"image/png":"18640b974fa51dcba9f916eac7b07170aa8c7178","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":547,"width":878}},"output_type":"execute_result"},"2":{"data":{"image/png":"5935c2c68e4178da3e2f1d03c36e540b63941e4e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":547,"width":878}},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"id":0,"time":1631732993295,"type":"user"}
{"last_load":1631829239414,"type":"file"}