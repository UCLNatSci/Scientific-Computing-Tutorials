{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-89002765-27c0-4752-b4b8-738aec71827f.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1635244830930,"exec_count":1,"id":"d53825","input":"pressure_data = [1018.3, 1018.3, 1015.7, 1014.3, 1011.8, 1011.4, 1015.5, 1016.0, 1016.9, 1016.8, 1016.4, 1017.5, 1018.8, 1018.1, 1017.1, 1018.4, 1022.0, 1022.8, 1021.8, 1020.5, 1021.0, 1019.8, 1018.9, 1018.4, 1017.8, 1018.1, 1019.6, 1017.4, 1015.8, 1015.5, 1017.5, 1018.9, 1017.7, 1014.4, 1014.2, 1016.0, 1016.1, 1015.6, 1016.4, 1015.7, 1016.6, 1019.6, 1021.6, 1021.4, 1020.6, 1017.6, 1016.5, 1016.2, 1013.0, 1005.4, 1007.4, 1012.2, 1015.2, 1016.1, 1014.3, 1012.4, 1014.2, 1013.1, 1012.9, 1012.1, 1010.6, 1010.0, 1010.5, 1010.3, 1007.4, 1008.9, 1007.4, 1006.9, 1009.8, 1014.8, 1014.9, 1016.6, 1014.1, 1011.1, 1010.7, 1009.8, 1011.9, 1012.6, 1011.8, 1009.8, 1008.9, 1010.6, 1009.9, 1010.2, 1009.5, 1009.0, 1007.1, 1007.1, 1007.5, 1005.0, 1004.2, 1004.2, 1007.2, 1005.0, 1002.9, 1007.4, 1010.4, 1010.6, 1008.6, 1006.2, 1005.9, 1006.8, 1004.6, 1002.4, 1003.2, 1004.4, 1003.1, 1000.9, 998.6, 999.9, 1001.6, 1002.1, 1004.1]\n    ","kernel":"python3","pos":4,"start":1635244830924,"state":"done","type":"cell"}
{"cell_type":"code","id":"0fbe73","input":"","pos":2,"type":"cell"}
{"cell_type":"code","id":"23d475","input":"   ","pos":9,"type":"cell"}
{"cell_type":"code","id":"3dfc8b","input":"","pos":5,"type":"cell"}
{"cell_type":"code","id":"db60dc","input":"","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"1e40f9","input":"# Tutorial 3","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5a0877","input":"## Question 3\n\nGiven a string representing a DNA sequence, we want to print a sequence of nucleotide names:\n```\ndna_seq = \"gttccccaagctcttacataaatgtcgtagggttccagctacgtgttgttgggccaccca\"\n```\nOutput:\n```\nGuanine\nThymine\nThymine\nCytosine\n...\n```\n- Create two lists `letters = [\"A\", \"G\", \"C\", \"T\"]` and `names = [\"Adenine\", \"Guanine\", \"Cytosine\", \"Thymine\"]`\n- Loop over every character in `dna_seq`. For each character:\n  - Find the index of the character in `letters`\n  - Print the item in the equivalent position in `names`\n\n**HINT**: First try just for a single letter. E.g. given `nuc = \"A\"`, print `Adenine`.","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5d043e","input":"## Question 2\nGiven a list of numbers, a moving average is a list containing the mean of `n` consecutive elements. For example, if `x = [1, 2, 3, 4]` and `n = 2` then the moving average of `x` is `[1.5, 2.5, 3.5]`.\n\nThe variable `pressure_data` is a list of atmospheric pressure readings in millibars.\n\nCreate a second variable `pressure_smoothed` which contains the the moving average of `pressure_data` with `n = 2` and plot the two lists on a graph. (The two lists will not be the same length so you will have to determine what to do about that!)\n\n**Challenge:** Adapt your code for an arbitrary value of `n`.","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c6ee16","input":"## Question 4 (Optional Challenge)\n\nA cannon located at position `x = 0` fires a cannonball at an angle `theta` from the horizontal (measured in radians) and speed `speed` m/s. Write a program which plots a graph of the cannonball's trajectory.\n\n```{image} cannon.jpg\n:alt: cannon\n:width: 200px\n```\n\nSet the initial positions `x` and `y` to zero and velocities `vx` and `vy` to `np.cos(theta)` and `np.sin(theta)`. Each time step, update the positions using `x = x + vx * DELTA_T` and `y = y + vy * DELTA_T`. Update the velocity `vy = vy - g * DELTA_T`. The x velocity remains constant.\nCreate lists `x_list` and `y_list` to store the x and y positions, appending the new positions at each timestep.\n\nRepeat until the `y` position becomes negative (what kind of loop should you use for this?). Finally, use `matplotlib` to plot the two lists.\n\n\nExtend your program so that it prints `hit` or `miss` depending if the cannonball lands less than 20m from a target placed at a distance `dis` from the cannon.\n\n```{image} cannon_output.png\n:alt: cannon output\n:width: 200px\n```\n\n`hit`","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e7ed4d","input":"## Question 1\n\nAs a train accelerates out of the station, its position is measured as follows:\n\n| time (s):    | 0  | 1 | 2 | 3 | 4  | 5  | 6 |\n|--------------|----|---|---|---|---|---|---|\n| position (m): |  0 |  0.15 | 0.61  | 1.35  | 2.40  | 3.75  | 5.41  |\n\n1. Create two lists `time` and `speed` to store the data then plot a line graph showing the trains speed against time. Add a title `Train Speed` and axis labels `Time (s)` and `Speed (m/s)`.\n1. Using the forumla $s =\\frac{1}{2}at^2$, create a list `speed_est` containing the position of the train for each time point. Assume that $a=0.2~\\mathrm{m/s^2}$.\n1. Plot the `speed_est` on the graph. By varying $a$, estimate the acceleration of the train.\n","pos":1,"state":"done","type":"cell"}
{"id":0,"time":1635244764783,"type":"user"}
{"last_load":1635244764547,"type":"file"}