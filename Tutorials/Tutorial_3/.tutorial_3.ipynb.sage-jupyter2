{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-6407ea9a-8aa0-4e99-bdc3-c044912004d2.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","exec_count":1,"id":"8343c6","input":"# Tutorial 3\n## Practice Questions","kernel":"python3","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"46e505","input":"### Question 2\n\nA cannon located at position `x = 0` fires a cannonball at an angle `theta` from the horizontal (measured in radians) and speed `speed` m/s. Write a program which plots a graph of the cannonball's trajectory.\n\n<img src=\"cannon.jpg\" width=\"200px\"></img>\n\nSet the initial positions `x` and `y` to zero and velocities `vx` and `vy` to `np.cos(theta)` and `np.sin(theta)`. Each time step, update the positions using `x = x + vx * DELTA_T` and `y = y + vy * DELTA_T`. Update the velocity `vy = vy - g * DELTA_T`. The x velocity remains constant.\nCreate lists `x_list` and `y_list` to store the x and y positions, appending the new positions at each timestep.\n\nRepeat until the `y` position becomes negative (what kind of loop should you use for this?). Finally, use `matplotlib` to plot the two lists.\n\n\nExtend your program so that it prints `hit` or `miss` depending if the cannonball lands less than 20m from a target placed at a distance `dis` from the cannon.\n\n<img src=\"cannon_output.png\" width=\"200px\"></img>\n\n`hit`","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"4d7b83","input":"### Question 3\n\nThe following code initialises a list `x` with ten random integers, then prints `x`.\n\nWrite code which prints four lines of output, containing\n- Every element of `x` at an even index.\n- Every even element.\n- All elements in reverse order.\n- Only the first and last element.","pos":2.5,"type":"cell"}
{"cell_type":"markdown","id":"99fb73","input":"### Question 2\n\nLook up the predicted daily maximum and minimum temperatures for the next 10 days according to the BBC weather forecast.\n\nhttps://www.bbc.co.uk/weather/2643743\n\nCreate two lists to store the maximum and minimum temperatures and plot them as two separate lines on a line graph, including axis labels and title. Look up how to add a legend.\n\n<img src=\"temperatures.png\" width=\"400px\"/>","pos":1.5,"type":"cell"}
{"cell_type":"markdown","id":"9e0123","input":"### Question 1\n\nUse a loop to generate the following lists:\n1. `[5, 7, 9, 11, 13, 15]`\n1. `[1, 10, 100, 1000, 10000, 100000]`\n1. `[0, 1, 2, 0, 1, 2, 0, 1, 2]` (hint: use the `%` operator)","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"df0791","input":"## Tutorial Questions\n\n### Question 1\n\nGiven a string representing a DNA sequence, we want to print a sequence of nucleotide names:\n```\ndna_seq = \"gttccccaagctcttacataaatgtcgtagggttccagctacgtgttgttgggccaccca\"\n```\nOutput:\n```\nGuanine\nThymine\nThymine\nCytosine\n...\n```\n- Create two lists `letters = [\"A\", \"G\", \"C\", \"T\"]` and `names = [\"Adenine\", \"Guanine\", \"Cytosine\", \"Thymine\"]`\n- Loop over every character in `dna_seq`. For each character:\n  - Find the index of the character in `letters`\n  - Print the item in the equivalent position in `names`\n\n**HINT**: First try just for a single letter. E.g. given `nuc = \"A\"`, print `Adenine`.\n","pos":3,"type":"cell"}
{"id":"37faba","input":"","pos":6,"type":"cell"}
{"id":"786a63","input":"","pos":1.25,"type":"cell"}
{"id":"cfa16f","input":"","pos":2,"type":"cell"}
{"id":"dcfa9f","input":"","pos":4,"type":"cell"}
{"id":0,"time":1631819189239,"type":"user"}
{"last_load":1631719444519,"type":"file"}