{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-ec1754fd-d412-4603-b53d-a1f3cafd8815.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1634750248976,"exec_count":21,"id":"fe4127","input":"def vol_disc(R, x, dx):\n    r = (R**2 - x**2)**0.5\n    return 3.14159 * r ** 2 * dx\n\nvol = 0\ndx = 2 / 10\npi = 3.14159\nfor i in range(10):\n    x = -1 + (i / 10) * 2\n    vol += vol_disc(1, x, dx)\n    \nprint(\"Volume of sphere radius 1:\", vol)\n\n# let's check it against the formula vol = (4/3)*pi*r**3\nprint((4/3) * pi)\n\ndef sphere_vol(R, n):\n    vol = 0\n    dx = 2 * R / n\n    pi = 3.14159\n    for i in range(n):\n        x = -R + (i / n) * 2 * R\n        vol += vol_disc(R, x, dx)\n    return vol\n        \ndiff = 1\nvol = 0\nn = 2\nwhile diff > 1e-4:\n    vol_prev = vol\n    vol = sphere_vol(1, n)\n    diff = vol - vol_prev\n    # could use np.abs here instead\n    if diff < 0:\n        diff = diff * -1\n    n += 1\n    # print(\"vol:\", vol)\n    # print(\"diff:\", diff)\n        \nprint(n)\nprint(vol)\n    ","kernel":"python3","output":{"0":{"name":"stdout","text":"Volume of sphere radius 1: 4.1468988\n4.188786666666666\n46\n4.186718130041153\n"}},"pos":3,"scrolled":true,"start":1634750248663,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0caee5","input":"","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"0b21a3","input":"def is_divisible(n, m):\n    return n % m == 0\n\ndef is_prime(n):\n    for m in range(2, n):\n        if is_divisible(n, m):\n            return False\n    return True\n\ndef number_of_primes(n):\n    i = 0\n    for m in range(2, n+1):\n        if is_prime(m):\n            i += 1\n    return i\n            \nprint(\"4 is divisible by 2:\", is_divisible(4, 2))\nprint(\"4 is divisible by 3:\", is_divisible(4, 3))\n\nprint(\"7 is a prime number:\", is_prime(7))\nprint(\"8 is a prime number:\", is_prime(8))\n\nprint(\"Number of prime numbers up to 10:\", number_of_primes(10))\nprint(\"Number of prime numbers up to 11:\", number_of_primes(11))\n    ","output":{"0":{"name":"stdout","output_type":"stream","text":"4 is divisible by 2: True\n4 is divisible by 3: False\n7 is a prime number: True\n8 is a prime number: False\nNumber of prime numbers up to 10: 4\nNumber of prime numbers up to 11: 5\n"}},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"118d53","input":"# Tutorial 2\n\n## Question 1\n\nUse `for` loops and `print(end=\"\")` to write functions which print the following patterns:\n\n1. `print_square(n)` where `n` is the number of stars along each edge.\n\n```\n*****\n*   *\n*   *\n*   *\n*****\n```\n2. `print_rhombus(n)` where `n` is the number of stars along each edge.\n\n```\n    *****\n   *   *\n  *   *\n *   *\n*****\n```\n \n3. `print_numbers(n)` where `n` is the number at the centre.\n\n```\n1       1\n 2     2\n  3   3\n   4 4\n    5\n   4 4\n  3   3\n 2     2\n1       1\n```","pos":-1,"type":"cell"}
{"cell_type":"markdown","id":"93ca28","input":"## Extension Questions (Optional)\n\nThese questions are open-ended and designed to allow to you challenge yourself beyond the material we have studied.\n\n1. Investgate the [Prime Number Theorem](https://en.wikipedia.org/wiki/Prime_number_theorem).\n1. Write a function `volume_of_revolution(func, x_min, x_max, n)` which calculates the volume of the surface of revolution of the curve given by function `func`. `func(x)` should be a function of a single variable which returns the y-value of the curve given the x value. You'll have to learn how to [pass a function as an argument to another function](https://www.geeksforgeeks.org/passing-function-as-an-argument-in-python/). Test your function by calculating the volume of a sphere,  a paraboloid and another curve of your choice.\n\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"e0b9a7","input":"## Question 3\n\nA [solid of revolution](https://en.wikipedia.org/wiki/Solid_of_revolution) is a three-dimensional figure contstructed by rotating a curve about a straight line. We can estimate the volume of a solid of revolution by dividing it into a sequence of stacked discs and summing the volume of each.\n\nA sphere of radius $R$ is formed by rotating the curve $y = \\sqrt{R^2 - x^2}$ around the x-axis between $-R$ and $R$.\n\n![a](https://miro.medium.com/max/2400/0*d7QEcno6XhPOiJSt.png)\n\nUse the following steps to estimate the volume of a sphere of radius 1.\n\n1. Write a function `vol_disc(R, x, dx)` which returns the volume of the disc centred at position `x` with thickness `dx`. \n1. Estimate the volume of a sphere of radius 1 by dividing the figure into 10 discs equally spaced between `-1` and `1` [use a value of 3.14159 for $\\pi$].\n1. Write a function `sphere_vol(R, n)` which returns the estimate of the volume of a sphere of radius `R` calculated by dividing it into `n` discs.\n1. The estimate should get more accurate as we increase `n`. We can estimate the accuracy by calculating the difference between `sphere_vol(R, n)` and `sphere_vol(R, n-1)`. For `R = 1`, how large does `n` need to be so that difference between consecutive estimates is less than $10^{-4}$?","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"edb716","input":"## Question 2\n\nAn integer $n$ is a *prime number* if it is divisible only by 1 and $n$. \n\n1. Write a function `is_divisible(n, m)` which returns `True` if `n` is divisible by `m`, and otherwise returns `False`.\n1. Write a function `is_prime(n)` which returns `False` if `n` is divisible by any integer between `2` and `n-1`, and otherwise returns `True`.\n1. Write a function `number_of_primes(n)` which returns the number of prime numbers less than or equal to `n` [NB 1 is *not* a prime number].\n\nCheck the correctness of your functions by writing two tests for each.","pos":0,"type":"cell"}
{"end":1634748842551,"exec_count":16,"id":"b600b1","input":"def print_square(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print()\n    for i in range(n - 2):\n        print(\"*\", end = \"\")\n        for j in range(n - 2):\n            print(\" \", end=\"\")\n        print(\"*\")\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print()\n        \ndef print_rhombus(n):\n    for i in range(n-1):\n        print(\" \", end=\"\")\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print()\n    for i in range(n - 2):\n        for j in range(n - 2 - i):\n            print(\" \", end=\"\")\n        print(\"*\", end=\"\")\n        for j in range(n-2):\n            print(\" \", end=\"\")\n        print(\"*\")\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print()\nprint_square(5)\nprint()\nprint_rhombus(5)\n        ","kernel":"python3","output":{"0":{"name":"stdout","text":"*****\n*   *\n*   *\n*   *\n*****\n\n    *****\n   *   *\n  *   *\n *   *\n*****\n"}},"pos":-0.5,"start":1634748842542,"state":"done","type":"cell"}
{"id":"318f85","input":"","pos":4.5,"type":"cell"}
{"id":0,"time":1634745422200,"type":"user"}
{"last_load":1634739734078,"type":"file"}